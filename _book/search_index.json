[
["basics.html", "Chapter 4 R Language Basics 4.1 Data Structures and Types", " Chapter 4 R Language Basics  4.1 Data Structures and Types There is no scalar in R. There is no scalar in R. There is no scalar in R. Every structure is of vector form. A (seemingly) scalar is indeed a vector of length 1. This is a striking concept compared to other general-purposed language or statistical packages. It turns out that the fact wonâ€™t affect mush about how to code R, but the understanding of such concept is helpful for better coding thinking in the R language.  4.1.1 Atomic Vector  Common types of atomic vector include: numeric, character, logical, and factor.   4.1.1.1 Numerics, Characters, and Logicals Atomic vector is the foundamental data structure in R. It is called atomic because it can only contain the same type of data. For example: 1 ## [1] 1 The number 1 is a vector (of length 1, so it looks like a scalar but yes it is a vector). To check the type of a vector one can use the function typeof: typeof(1) ## [1] &quot;double&quot; The result of typeof reveals that the storage mode of the vector 1 is double; hence the vector is a numeric vector. There are many bulit-in functions to manipulate numeric vector. Some examples follow: 1:5 ## [1] 1 2 3 4 5 seq(5, 1, -1) ## [1] 5 4 3 2 1 c(1, 1, 2, 3, 5) ## [1] 1 1 2 3 5 To force R use integer type (it use considerably less storage space compared to a double), just append L to the number: typeof(1:5L) ## [1] &quot;integer&quot; Since a atomic vector is, atomic, it has no nesting structure: c(1:5, seq(5, 1, -1), c(1, 1, 2, 3, 5)) ##  [1] 1 2 3 4 5 5 4 3 2 1 1 1 2 3 5 The result of concatenation of multiple atomic vectors is one single atomic vector, not a vector nested with three different vectors. Does this mean that atomic vectors of different types can not be combined? Not necessary. num_vec &lt;- 1:3 str_vec &lt;- c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;) c(num_vec, str_vec) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;a&quot; &quot;b&quot; &quot;c&quot; When a numeric vector and a character vector combine, the resulting atomic vector is of type character. Such behavior is called type coercion and is a very important concept in most programming languages. Coercion always occurs when different types of atomic vectors are combined. The principle of coercion is to minimize information loss, if any. For example, when a logical vector combined with numeric: num_vec &lt;- 1:3 bol_vec &lt;- c(TRUE, FALSE, FALSE) # or c(T, F, F) but not recommended typeof(c(num_vec, bol_vec)) ## [1] &quot;integer&quot; logicals are coerced into integer. More examples on coercion: typeof(c(1, 2L)) ## [1] &quot;double&quot; typeof(c(1L, TRUE)) ## [1] &quot;integer&quot; typeof(c(1.0, TRUE)) ## [1] &quot;double&quot; typeof(c(1.0, TRUE, &quot;foo&quot;)) ## [1] &quot;character&quot;   4.1.1.2 Factors   4.1.1.3 Matrix   4.1.1.4 Array    4.1.2 Recursive Vector  4.1.2.1 List   4.1.2.2 Data Frame    4.1.3 Function   4.1.4 Control Flow    "]
]
