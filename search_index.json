[
["index.html", "RBasic 101 Chapter 1 Prologue 1.1 Thought Experiments 1.2 Welcome to the R Language", " RBasic 101 Kyle Chung 2016-04-18   Chapter 1 Prologue The materials of this book target at new users or users not very familiar with R. Before you start to read this book, take a look at the following examples to test your familiarity with the R language.  1.1 Thought Experiments  1.1.1 First Trial A &lt;- 1 + 1 (B &lt;- 1 + 1) ## [1] 2 identical(A, B) ## [1] TRUE Now you know that adding parenthesis around an expression will force R to print the result of it. But why? If you immediately type ?&quot;(&quot; to search for a possible anwser, you are probably not new to the R language. And if you can further read the document and get yourself understood, you are not the targeted reader of this book.   1.1.2 Second Trial a_vec &lt;- 1:2 names(a_vec) ## NULL names(a_vec) &lt;- c(&quot;foo&quot;, &quot;bar&quot;) names(a_vec) ## [1] &quot;foo&quot; &quot;bar&quot; The function names is used to return the names of the object given, if any. In the third line we also use names to rename the object. Now you know that we can use such tech to rename an object. But how is it possible to asign a value to the returned value of a function? Should you really think it is okay to do so, then think about the following codes: xf &lt;- function(x) x xf(1) &lt;- 2 ## Error in xf(1) &lt;- 2: target of assignment expands to non-language object Oops! Acutally you can’t do that. Asign a value to the returned value of a function causes an error. But names(a_vec) &lt;- c(&quot;foo&quot;, &quot;bar&quot;) does work, right? If you do understand the reason why it actually works, you are not the targeted reader of this book.   1.1.3 Third Trial `+`(1, 2) ## [1] 3 You may never see this coming before, or you just don’t code in such style, but you do understand this is a function call to the add function, in a functional way. That say, you are completely comfortable about the following codes: for ( op in c(`+`, `-`, `*`, `/`) )   print(op(10, 2)) ## [1] 12 ## [1] 8 ## [1] 20 ## [1] 5 Then you are not the targeted reader of this book.    1.2 Welcome to the R Language If all the above examples bother you nothing, you are not the targeted reader of this book since you are quite familiar with the R language and you do know how to dive depper on your own. But if some or all of the above examples make you confused or starting googling, you can learn from this book. This book is NOT a HOW-TO cookbook to teach you how to write in the R language. A HOW-TO cookbook will let you know, in the R language, how to force print an expression, or rename an object. This book is NOT a HOW-TO cookbook. Yes we can use ( to force print an expression. But why? Yes we can use names to rename an object. But why? This book is to teach you WHY we write R in this or that way. Consequently you are not just coding in R, you are also thinking in R. And that’s where the R language starts to shine.   "],
["install.html", "Chapter 2 Installation 2.1 R Installation 2.2 R Package Installation", " Chapter 2 Installation R is open-sourced and can be installed on operating systems such as Windows, OS X, or many other Linux/Unix distributions. This chapter describes the recommended way to install R and R packages across different platform.  2.1 R Installation  2.1.1 Windows The best way to install R on a Windows PC is to download the binary executable from CRAN. Click through “Download R for Windows” and “install R for the first time” to get the file. For example, the latest stable version is R-3.2.4revised-win.exe when this chapter was written. One can also find older versions of R under the CRAN’s /bin/windows/base/old folder. The installation of R for Windows from the above executable file will also include a GUI tool called RGui.exe for interactive development purpose.   2.1.2 OS X (Mac) The best way to install R on a Mac is to download the binary package file from CRAN. Click through “Download R for (Mac) OS X” and download the latest stable version. For example, the latest stable version is R-3.2.4.pkg when this chapter was written. One can also find older versions of R under the CRAN’s /bin/macosx/base/old folder. The installation of R for Mac from the above pacakge file will also include a GUI tool called R.app for interactive development purpose.   2.1.3 Ubuntu There are many ways to get R installed on a Linux box. Here we use Ubuntu as an example. Naturally one would probably like to check if there is already available compiled package from any repository of your distribution. To do so, use sudo apt-cache policy r-base and something like the following may return: r-base:   Installed: (none)   Candidate: 3.0.2-1ubuntu1   Version table:      3.0.2-1ubuntu1 0         500 http://mirrors.digitalocean.com/ubuntu/ trusty/universe amd64 Packages But generally the compiled version on Ubuntu default repository won’t catch up with the latest one on CRAN. If it is okay to install the older version of R then all the things left to do is a simple sudo apt-get install r-base. However, if one would like to install the latest stable version of R, a mirror of CRAN must be setup. This is documented in details under CRAN’s bin/linux/ubuntu/ folder. For Ubuntu 14.04, add deb https://&lt;my.favorite.cran.mirror&gt;/bin/linux/ubuntu trusty/ to /etc/apt/sources.list, where &lt;my.favorite.cran.mirror&gt; should be replaced with one of the preferred mirrors from CRAN’s mirror list. One choice is the NTU mirror so the added line to the sources.list file will be: deb https://http://cran.csie.ntu.edu.tw//bin/linux/ubuntu trusty/ After this is done, use sudo apt-get update to update the package manager and use sudo apt-get install r-base to install the latest version of R. You may also like to do sudo apt-get install r-base-dev to further install developer’s tools. If there is any error concerning the secure key issue, consult the “Secure APT” section for solution.   2.1.4 Update the R Installation TBA    2.2 R Package Installation  2.2.1 From CRAN Use install.packages   2.2.2 From Source   2.2.3 From Github Use devtools::install_github    "],
["clivside.html", "Chapter 3 CLI versus IDE 3.1 CLI (Command-Line Interface) 3.2 IDE (Integrated Development Environment) 3.3 Interactive v.s. Batch Mode", " Chapter 3 CLI versus IDE R is not only a package for statistical analysis, it is indeed a complete general-purposed language. This is exactly why it is so powerful and flexible compared to other statistical packages such as SAS, Stata, RATS, or even SPSS. But this is also why it’s harder to learn compared to the above packages. To develop your analytics via the R language, i.e., to use R, you may either work under a Command-Line Interface or an Integrated Development Enviornment.  3.1 CLI (Command-Line Interface) Once R is installed on your machine, you can use the CLI to execute R in either interactive mode or batch mode.  3.1.1 For Windows User The CLI on Windows is generally represented by the built-in cmd.exe. Unfortunately it is not user-friendly so please just ignore it. A more viable choice is to use RGui.exe. It is actually not just a CLI but a minimal IDE to use R. The GUI of RGui.exe contains a CLI for user to use the R language interactively, and optionally one or multiple text editors to edit Rscript. The beauty of it is that you can select part or all of a Rscript to send to the CLI for execution, and immediately get the result printed.   3.1.2 For OS X (Mac) User The CLI on OS X is generally represented by the built-in Terminal.app. To use R under the terminal just type “R” and hit enter. A welcome message will be immediately printed, followed by a command prompt (&gt;) waiting for further instruction in the R language: R version 3.2.0 (2015-04-16) -- &quot;Full of Ingredients&quot; Copyright (C) 2015 The R Foundation for Statistical Computing Platform: x86_64-apple-darwin13.4.0 (64-bit)  R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under certain conditions. Type &#39;license()&#39; or &#39;licence()&#39; for distribution details.    Natural language support but running in an English locale  R is a collaborative project with many contributors. Type &#39;contributors()&#39; for more information and &#39;citation()&#39; on how to cite R or R packages in publications.  Type &#39;demo()&#39; for some demos, &#39;help()&#39; for on-line help, or &#39;help.start()&#39; for an HTML browser interface to help. Type &#39;q()&#39; to quit R.  &gt;    3.1.3 For Linux User Open a terminal, type “R” and hit enter. There you are.    3.2 IDE (Integrated Development Environment) CLI is useful to quickly check result of light-weighted R codes. But it is not suitable for more complex development needs. To flexibly develop your analytics via the R language, an IDE is highly recommended.  3.2.1 RStudio RStudio is a powerful IDE specifically designed for the R language, supported multiple platform. It is strongly recommended that user new to the R language uses RStudio as the main tool to explore the potentials of R.   3.2.2 RStudio Server For Linux user, there is also a server version of RStudio. It allows users to use the IDE over a web browser. That is, users can access remote machine with R and RStudo Server properly installed.    3.3 Interactive v.s. Batch Mode [Notice: this section is mainly written for *nix system.] When one is in the R language command prompt, one is in the interactive mode. A production-ready script is usually executed in batch mode, while in other cases like doing data exploration or iterative analytics, the interactive mode will be more appropriate. Even though a R program (or Rscript, interchangeably) is designed to be run in batch mode, it is probably developed and even tested mainly in interactive session.  3.3.1 Parsing Command Line Arguments When running a Rscript in batch mode, it is possible to parse additional arguments given along with the command line. The arguments can be parsed by the function commandArgs. Consider the following example, assumed a file name of parse-cmdarg.R: #!/usr/bin/env Rscript  fcmdargs &lt;- commandArgs() script_name &lt;- basename(fcmdargs[grepl(&quot;--file&quot;, fcmdargs)]) cmdargs &lt;- commandArgs(trailingOnly=TRUE) message(&quot;The script name is: &quot;, script_name) i &lt;- 0 for ( arg in cmdargs ) {   i &lt;- i + 1   message(sprintf(&quot;Argument %s: %s&quot;, i, arg)) } Run the above script by something like ./parse-cmdarg.R arg1 arg2 arg3 should give the following result: The script name is: parse-cmdarg.R Argument 1: arg1 Argument 2: arg2 Argument 3: arg3 Even when in interactive mode one can use commandArgs to get the underlying arguments given. This is true because an interactive R session is also initiated by a command line, which in turn can have its own command line arguments.   3.3.2 Interactive or Not Interactive? One can use the function interactive to check if the current session is in interactive or batch mode. The function returns TRUE when the current session is indeed interactive; otherwise it returns FALSE. This can be handy if the main program is for batch processing but one needs to debug it interactively. For example, considering the following Rscript add-one.R: #!/usr/bin/env Rscript  cmdargs &lt;- commandArgs(trailingOnly=TRUE) as.integer(cmdargs[1]) + 1 The program simply add the first command line argument by one and print the result. Run ./add-one.R 1 will give a result of: [1] 2 But what if we don’t supply any argument? What if an argument other than number is used? Since this script is tiny, one can easily test these scenarios under CLI, say, ./add-one.R or ./add-one.R foo to realize the possible consequences and make corresponding modification, In reality the main program can be large in size and the consequences of unexpected command line arguments are not easily forseen. Let’s try modifying the add-one.R program in the following manner: #!/usr/bin/env Rscript  if ( interactive() ) {   cmdargs &lt;- &quot;anything to be tested&quot; } else {   cmdargs &lt;- commandArgs(trailingOnly=TRUE) } as.integer(cmdargs[1]) + 1 Now one can simulate the argument given in command line, even if the current session is interactive. What one’s doing is to change the string “anything to be tested” to anything one can imagine to test the behavior of this BATCH program, INTERACTIVELY. Notice that the modified program will behave totally the same in batch mode. The modification just makes it easier to be tested under interactive session.   3.3.3 Shabang #! One should notice that all the above Rscripts contain a first line starting in #!. This is a unix convention sometimes called “shabang” to mark the process name that should be used to execute the script. Should one choose not to declare the shabang line, the script can still be executed, but the command line must be explicit: Rscript parse-cmdarg.R some_args rather than: ./parse-cmdarg.R some_args Also, it is the unix-way to prepend the ./ to the file that is to be executed, provided that the file is executable. One should use chmod +x your_rscript.R to mark one’s script to be executable, as long as that script is expected to serve in batch mode.    "],
["data-struc.html", "Chapter 4 Data Structures and Types 4.1 Atomic Vector 4.2 Recursive Vector 4.3 Type Conversion 4.4 Special Values", " Chapter 4 Data Structures and Types There is no scalar in R. There is no scalar in R. There is no scalar in R. Every structure is of vector form. A (seemingly) scalar is indeed a vector of length 1. This is a striking concept compared to other general-purposed language or statistical packages. It turns out that the fact won’t affect mush about how to code R, but the understanding of such concept is helpful for better coding thinking in the R language. Compared to other general-purposed language, the built-in data structures are not rich in R. But they are considerably flexible. Most of the analytics can be fulfilled based on the minimal set of these structures. All structures are vectors in R. And there are two types of vector: atomic and recursive. This chapter will quickly go through both of them.  4.1 Atomic Vector  Common types of atomic vector include: numeric, character, logical, and factor.  Atomic vector is the foundamental data structure in R. It is called atomic because it can only contain the same type of data and no nesting allowed. For example: 1 ## [1] 1 The number 1 is a vector (of length 1, so it looks like a scalar but yes it is a vector). To check the type of a vector one can use the function typeof: typeof(1) ## [1] &quot;double&quot; The result of typeof reveals that the storage mode of the vector 1 is double; hence the vector is a numeric vector. There are many bulit-in functions to manipulate numeric vector. Some examples follow: 1:5 ## [1] 1 2 3 4 5 seq(5, 1, -1) ## [1] 5 4 3 2 1 c(1, 1, 2, 3, 5) ## [1] 1 1 2 3 5 rep(777, 3) ## [1] 777 777 777 One can also use integer, numeric, character, and logical as a creation function to create vectors of corresponding type, with the argument to be the desired length of the created vector: integer(3)    # default value is 0L ## [1] 0 0 0 numeric(3)    # default value is 0 ## [1] 0 0 0 character(3)  # default value is &quot;&quot; (empty string) ## [1] &quot;&quot; &quot;&quot; &quot;&quot; logical(3)    # default value is FALSE ## [1] FALSE FALSE FALSE Normally a number will be associated with type double. To force R use integer type (it use considerably less storage space compared to a double), just append L to the number: typeof(1:5L) ## [1] &quot;integer&quot; Since an atomic vector is, atomic, it has no nesting structure: c(1:5, seq(5, 1, -1), c(1, 1, 2, 3, 5)) ##  [1] 1 2 3 4 5 5 4 3 2 1 1 1 2 3 5 The result of concatenation of multiple atomic vectors is one single atomic vector, not a vector nested with three different vectors. Does this mean that atomic vectors of different types can not be combined? Not necessary. num_vec &lt;- 1:3 str_vec &lt;- c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;) c(num_vec, str_vec) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;a&quot; &quot;b&quot; &quot;c&quot; When a numeric vector and a character vector combine, the resulting atomic vector is of type character. Such behavior is called type coercion and is a very important concept in most programming languages. Coercion always occurs when different types of atomic vectors are combined. The principle of coercion is to minimize information loss, if any. For example, when a logical vector combined with a numeric: num_vec &lt;- 1:3 # here one uses &quot;&lt;-&quot;&quot; to asign a value to an object bol_vec &lt;- c(TRUE, FALSE, FALSE) # or c(T, F, F) but not recommended typeof(c(num_vec, bol_vec)) ## [1] &quot;integer&quot; logicals are coerced into integer. More examples on coercion: typeof(c(1, 2L)) ## [1] &quot;double&quot; typeof(c(1L, TRUE)) ## [1] &quot;integer&quot; typeof(c(1.0, TRUE)) ## [1] &quot;double&quot; typeof(c(1.0, TRUE, &quot;foo&quot;)) ## [1] &quot;character&quot; In addition to coercion, one can also explicitly convert one type to another. This is done by the function family as. For example, to convert logicals into integers and vice versa: as.logical(-1:2L) ## [1]  TRUE FALSE  TRUE  TRUE as.integer(c(TRUE, FALSE, FALSE)) ## [1] 1 0 0 Notice that when casting integers to logicals, all the non-zeroes are converted to TRUE, only 0s are converted to FALSE.  4.1.1 General Operations on Vectors  4.1.1.1 Subseting Vectors can be subset by using the bracket syntax. vv &lt;- 10:1 vv[1:2] ## [1] 10  9 vv[c(1, 3, 5)] ## [1] 10  8  6 vv[rep(3, 5)] ## [1] 8 8 8 8 8 The bracket accepts another vector as a selection vector. If the selection vector is of type numeric, the original vector is to be selected based on numerical index. Any non-integer will be floored so the result of c(1:10)[c(1.1, 1.9)] is 1, 1. Since the bracket accepts vectors, one can also use logical vector for subsetting: vv &lt;- 3:1 vv[c(TRUE, FALSE, FALSE)] ## [1] 3 The fact that subsetting is done by another vector results in filtering being very easy: vv &lt;- 1:10 vv[vv &gt; 5] ## [1]  6  7  8  9 10 Since all structures are vectors, mathematical operators such as &gt; also work on vectors by nature. The result of vv &gt; 5 is an element-wise comparison and hence also a vector of the same lenght: vv &lt;- 1:10 vv &gt; 5 ##  [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE The resulting logical vector can then be used to subset the original vector. One can also use negative selection: vv &lt;- 1:3 vv[-3] ## [1] 1 2 vv[-length(vv)] ## [1] 1 2 vv[-(1:3)] ## integer(0) Subset a vector may resulting in missing values: vv &lt;- 1:3 vv[4] ## [1] NA Here the selection vector tries to extract the 4th element of the original vector but there is none. This will not cause any error in R; instead, the resulting vector will contains NA, which generally means a missing value.   4.1.1.2 Updating Vectors can be updated by using the bracket syntax as well. vv &lt;- 1:5 vv[1:3] &lt;- 0 vv ## [1] 0 0 0 4 5 One interesting question arises: what happen if one tried to update an element that does not exist in the vector? vv &lt;- 1:5 vv[7] &lt;- 0 vv ## [1]  1  2  3  4  5 NA  0 Two things to be noticed. First, the value will be asigned, as if it is newly created. Second, the vector will be expanded with NAs to align the new length that satisfies the updated result. How about a delete? There is no delete method in R. To effectively delete an element in a vector, use negative selection and asign the new object: # to delete the 5th element: vv &lt;- 1:5 (vv &lt;- vv[-5])  # use parenthesis to force print ## [1] 1 2 3 4 The operation of the bracket syntax is indeed functional. (Type ?&quot;[&quot; to see the document.) To understand more about what’s going on behibd the scene, one should refer to section 6.5 and also 6.6.   4.1.1.3 Naming Vectors can be named. To check the names of a vector, use the function names. To name or rename a vector, just try asign the names in a character vector to the names function call. vv &lt;- 1:3 names(vv) ## NULL names(vv) &lt;- c(&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;) str(vv) ##  Named int [1:3] 1 2 3 ##  - attr(*, &quot;names&quot;)= chr [1:3] &quot;foo&quot; &quot;bar&quot; &quot;baz&quot; If one is confused why the renaming syntax actually works, see section 6.6 for more details. Vectors can be partially named: vv &lt;- 1:3 names(vv) &lt;- c(&quot;foo&quot;, &quot;bar&quot;) names(vv) ## [1] &quot;foo&quot; &quot;bar&quot; NA Since the third element is unnamed, it is NA when calling names to print the names.    4.1.2 Factor Factors are special integer vectors. They are generally used to record categorical variables. It combines both features of characters and numerics, so it could be confusing for new users. Usually a factor is defined on a set of characters: baz &lt;- c(&quot;foo&quot;, &quot;bar&quot;) bazf &lt;- factor(baz) typeof(bazf) ## [1] &quot;integer&quot; str(bazf) ##  Factor w/ 2 levels &quot;bar&quot;,&quot;foo&quot;: 2 1 Notice that the typeof indicates an integer type. This is true because factors are stored internally as integers. The levels of a factor reveals the complete set of characters that could appear in the factor. Now consider a little more complicated example: baz &lt;- c(&quot;foo&quot;, &quot;bar&quot;, &quot;bar&quot;, &quot;foo&quot;, &quot;bar&quot;) bazf &lt;- factor(baz) levels(bazf) ## [1] &quot;bar&quot; &quot;foo&quot; When an object contains repeating samples of characters, it may be a good choice to use factor type to represent it for performance and efficiency issue, since levels only contain distinct values. levels can be manually specified when creating a factor, and levels are ordered. The order will be automatically determined if not specified. baz &lt;- c(&quot;foo&quot;, &quot;bar&quot;, &quot;bar&quot;, &quot;foo&quot;, &quot;bar&quot;) bazf1 &lt;- factor(baz, levels=c(&quot;bar&quot;, &quot;foo&quot;)) bazf2 &lt;- factor(baz, levels=c(&quot;foo&quot;, &quot;bar&quot;)) str(bazf1) ##  Factor w/ 2 levels &quot;bar&quot;,&quot;foo&quot;: 2 1 1 2 1 str(bazf2) ##  Factor w/ 2 levels &quot;foo&quot;,&quot;bar&quot;: 1 2 2 1 2 levels can even contain unseen values: baz &lt;- c(&quot;foo&quot;, &quot;bar&quot;, &quot;bar&quot;, &quot;foo&quot;, &quot;bar&quot;) bazf3 &lt;- factor(baz, levels=c(&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;)) str(bazf3) ##  Factor w/ 3 levels &quot;foo&quot;,&quot;bar&quot;,&quot;baz&quot;: 1 2 2 1 2   4.1.3 Matrix   4.1.4 Array    4.2 Recursive Vector  4.2.1 List   4.2.2 Data Frame    4.3 Type Conversion   4.4 Special Values  4.4.1 NA   4.4.2 NaN   4.4.3 NULL    "],
["control.html", "Chapter 5 Control Flow 5.1 Conditioning 5.2 Loop", " Chapter 5 Control Flow  5.1 Conditioning  5.1.1 if The if statement (a function indeed) can handle conditional branching of the codes. It can be followed by optional else if and else branches. if ( TRUE ) {   print(&quot;Yes it is true.&quot;) } else if ( TRUE ) {   print(&quot;This is never printed.&quot;) } else {   print(&quot;When nothing above holds, this is printed.&quot;) } ## [1] &quot;Yes it is true.&quot; Notice that when else if exists, conditions are checked in order. The first matched branch will be executed and all the other dsicarded. This is why the second branch is never triggered in the above example even if the condition is TRUE as well. The condition in if can not handle logical vectors with length more than one. In the following example, a warning will be issued with the result clearly explained. if ( c(TRUE, FALSE) ) {   1 + 1 } ## Warning in if (c(TRUE, FALSE)) {: the condition has length &gt; 1 and only the ## first element will be used ## [1] 2 This is why sometimes people think there does exist scalar variable in R. But the truth is that everything is in vector form. There is a more functional way of using if. Consider this example: # set.seed(777) cond &lt;- sample(1:10, 1) res &lt;- if ( cond &gt; 5 ) &quot;foo&quot; else &quot;bar&quot; res ## [1] &quot;foo&quot; The above code is stochastic due to sample without a fixed seed. Here one directly asign the result of an if to a variable. Such syntax only works in functional language. It works because if is a function, and a function should always return something–here evaluation of the last expression of if is the returned value of it. When the conditioning is more complicated, a recommended indent style may look like: # set.seed(777) cond &lt;- sample(1:10, 1) res &lt;-    if ( cond &gt; 5 ) {     message(&quot;cond is &quot;, cond, &quot;: go if&quot;)     &quot;foo&quot;    } else {     message(&quot;cond is &quot;, cond, &quot;: go else&quot;)     &quot;bar&quot;   } ## cond is 9: go if res ## [1] &quot;foo&quot;   5.1.2 ifelse There is a vectorized version of if: the ifelse function. Now it accepts a vector of any length: vec_cond &lt;- sample(1:10, 10, replace=TRUE) &gt; 5 ifelse(sample(1:10, 10, replace=TRUE) &gt; 5, 1:10, -(1:10)) ##  [1]  -1  -2   3   4   5   6  -7  -8   9 -10 Notice that the call to sample results in a vector of length 10, the second argument is a vector when the condition holds, and the third for condition not holds. What happen if the vector lengths are different? Recycling will occur. See section 7.3 for more details about recycling.   5.1.3 Logical Operations There are in general two types of logical operators in R. The single form (like &amp;, |) and the double form (like &amp;&amp; annd ||). The former is vectorized, i.e., element-wise operator, and the latter is scalar-like: only the first element is processed. To see things clear: c(TRUE, FALSE, FALSE) &amp; -1:1  ## [1]  TRUE FALSE FALSE c(TRUE, FALSE, FALSE) &amp;&amp; -1:1  ## [1] TRUE Users who are familiar with other programming language may feel confused because in most general-purposed language only the double form is used as logical operator and the single form is used to perform bit-wise operation. In the R language this is simply not true. The single form serves both as bit-wise and also vectorized logical operator. Use xor for vectorized logical AND bit-wise XOR operator. One should also note that there is implicit casting (or coercion) happening in the above example. Numeric vectors are coerced into logical ones before a logical operation actually takes place.    5.2 Loop  5.2.1 repeat To repeat a code chunk, use repeat. Since there is no conditioning in repeat, usually users must also specify a conditonal break by if to avoid an infinite loop. cnt &lt;- 0 repeat {   print(&quot;Hello World!&quot;)   cnt &lt;- cnt + 1   if ( cnt &gt;= 5 )     break } ## [1] &quot;Hello World!&quot; ## [1] &quot;Hello World!&quot; ## [1] &quot;Hello World!&quot; ## [1] &quot;Hello World!&quot; ## [1] &quot;Hello World!&quot;   5.2.2 while The while loop is another common control flow available in most programming language. It accepts a condition and as long as the condition holds the code chunk will repeat. The condition is checked at the very begining of each run. cnt &lt;- 0 while ( cnt &lt; 5 ) {   print(&quot;Hello while!&quot;)   cnt &lt;- cnt + 1 } ## [1] &quot;Hello while!&quot; ## [1] &quot;Hello while!&quot; ## [1] &quot;Hello while!&quot; ## [1] &quot;Hello while!&quot; ## [1] &quot;Hello while!&quot; There is no “until” loop in R. One can use repeat to implement an “until” function. Also a while ( TRUE ) implementation can be readily replaced with repeat.   5.2.3 for Another must-have loop structure is the for loop. It implements iteration operations. The basic syntax of for would look like: for ( i in 1:5 )   print(i) ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 Remember that one can use if functionally. That is, we cab asign the returned value of a if to a variable. Is that also true for for? Consider the following codes: res &lt;- for ( i in 1:10 ) i res ## NULL i ## [1] 10 Oops! the variable res has a value of NULL, not a value of the last evaluated i (which shall be 10). Does this mean that for is not a function? No. Every operation in R is a function call. if is a function. for is a function. But for is a function that will return NULL by default and that is not alterable. More interesting, for actually returns NULL invisibly, so one won’t get a NULL printed to the console everytime when a for is done. Iterating over numbers is not all what for can do. Basically a for can iterate on any vector, atomic or recursive. This is powerful and is often ignored by beginners. a &lt;- rnorm(100) b &lt;- runif(100) for ( l in list(a,b) )   print(mean(l)) ## [1] -0.03519702 ## [1] 0.5113131 All vectors can be iterated. What about a matrix? Remember that a matrix is simply an atomic vector with a dim attribute. So surely it can be iterated: (only for illustration purpose because such scenario is rarely practical) for ( i in matrix(1:4,2,2) ) print(i) ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 for is useful. But don’t use for for large-sized iteration. The overhead of for is usually quite high and since most basic operations in R are vectorzied, one should consider vectorizing in the first place when developing scripts. The following somewhat silly coding illustrates the basic difference in performance when vectorization is available: tt &lt;- vv &lt;- kk &lt;- integer(1e5) system.time(for ( i in 1:length(tt) ) vv[i] &lt;- tt[i] + 1) ##    user  system elapsed  ##   0.131   0.005   0.138 system.time(kk &lt;- tt + 1) ##    user  system elapsed  ##   0.001   0.000   0.001 identical(vv, kk) ## [1] TRUE To understand more, see the section 7.2.    "],
["func.html", "Chapter 6 Function 6.1 User-Define Function 6.2 Arguemnts 6.3 Anonymous Function (Lambda) 6.4 Lexical Scoping 6.5 Extraction Function 6.6 Replacement Function", " Chapter 6 Function Functions are very important in the R language because R is mostly a functional language. Indeed, every operation ever happens is a function call. This may not be easily seen in the first place. But while one types something like: 1 + 1 ## [1] 2 what really happens is a function call to the add function (see ?&quot;+&quot;). The expression is a sugar: this is the usual way human beings write down a mathematical expression. The functional way of such expression would be more like this one: `+`(1, 1) ## [1] 2 This fact holds not only for +, but also other operators like -, *, /, &gt;, &lt;, and =. Indeed these so-called “operators” are just functions. Control flows are also functions (see ?&quot;if&quot;). Indeed, even { and [ are functions. Functions are objects in R. So they can be manipulated in the way objects can be. Let’s do some impractical but potentially inspiring coding: for ( op in c(`+`, `-`, `*`, `/`) )   print(op(10, 2)) ## [1] 12 ## [1] 8 ## [1] 20 ## [1] 5 Functions are objects. And objects can be asigned. Here one asigns a function to another variable and use that variable to call the function. Another question in hand: is c(`+`, `-`, `*`, `/`) an atomic vector or recursive one? There is no function-typed aotomic vector. So even if the elements are all function (indeed, builtin), the resulting concatenation is a list.  6.1 User-Define Function A function can be created using the function function. f &lt;- function() {} In the aboce one liner a function f that does nothing is defined. A function can be called when suffixed with parantheiss (): f() ## NULL Notice that a NULL is return even if the function definition didn’t do it explicitly. Functions should always return something. NULL is that something, for acutally nothing. To explicitly return a value in a function definition, one can use the return function: f &lt;- function() {   return(1) } f() ## [1] 1 It is important to understand that a return is an exit point for a function. It signals the function to end its task. So consider the following function definition: f &lt;- function() {   print(0)   return(1)   print(2) } f() ## [1] 0 ## [1] 1 The number 2 will never be printed because there is a return before it. One don’t need a return to return values in a function. When there is no explicit return, a function will return its last-evaluated value: f &lt;- function() {   1 + 1   2 + 2 } f() ## [1] 4 So why bothering use the return? It can be handy if one expects a function to exit in an early point by some conditioning: f &lt;- function() {   if ( sample(c(TRUE, FALSE), 1) ) {     print(&quot;No Luck.&quot;)     return(NULL)       }   print(&quot;Do things...&quot;)   1 + 1   2 + 2 } for ( i in 1:5 ) { f() } ## [1] &quot;No Luck.&quot; ## [1] &quot;No Luck.&quot; ## [1] &quot;No Luck.&quot; ## [1] &quot;Do things...&quot; ## [1] &quot;Do things...&quot; The above function may randomly exit.   6.2 Arguemnts A function can have arguemnts. Returned values are output of a function, arguments are input. Both are optional in coding but jusy the former will be implicitly set. To use arguments in a function, just name it in the definition: f &lt;- function(x, y) {   x } identical(f(1), f(2, x=1)) ## [1] TRUE Several things worth noting:  There can be many arguments Arguments are not typed: just as all other variables in R Arguments can bve supplied by position or by name Arguments that are not used are not checked at all (so can be missing)  f &lt;- function(x, y) {   args &lt;- as.list(match.call())   for ( a in args ) print(a) } f(1, 2) ## f ## [1] 1 ## [1] 2  6.2.1 Default Value Arguments can have default value given in the definition. When actually supplied in the function call, the default value will be overwritten. f &lt;- function(x, y=1) {   x + y } for ( i in 1:5 ) print(f(i)) ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 for ( i in 1:5 ) print(f(10, i)) ## [1] 11 ## [1] 12 ## [1] 13 ## [1] 14 ## [1] 15   6.2.2 Ellipsis (...)    6.3 Anonymous Function (Lambda) In all the above examples, functions are asigned to variables. Or naturally speaking, functions are named. This is, however, not necessary. Consider the following example: f &lt;- function(g) {   typeof(g) } f(function() 1 + 1) ## [1] &quot;closure&quot; What’s going on here? The function f is a function that print the result of typeof for its argument. Yes it is completely redundant and is purely created for educational purpose. The argument g can be virtaully anything. So why not a function? When one types things such as f(3) one doesn’t asign a variable the number 3 (i.e., x &lt;- 3; f(x)) so why bothering assigning a function? That’s where the anonymous function comes in place. Sometimes a function is a one-timer so it is not worth tpying and assigning a variable for it. This is especailly true when using the apply family, which is explored in section 7.4. Anonymous functions are sometimes called lambda in other programming language and is a common utility in modern languages, even for languages that is not functional (e.g., Python). There is another use case when one won’t explicitly assign variable to a function, because that will be done in another function! That is, one can write a function that returns a function: f &lt;- function(x) {   if ( x == &quot;add&quot; ) {     function(y, z)       y + z   } else if ( x == &quot;mul&quot; ) {     function(y, z)       y * z   } else {     function()       NULL   } } g &lt;- f(&quot;add&quot;) # the result should be 3 identical(g(1, 2), f(&quot;add&quot;)(1, 2)) ## [1] TRUE Now the world is more functional. The f function is a factory to create different functions by its arguemnt. The return value of f is a newly created function–whatever name it is–and since the return value is a function, of course it can be called to work. Even the return function doesn’t need to have be named or assigned, one can directly call it with () suffix.   6.4 Lexical Scoping Function definitions can be nested. f &lt;- function(x) {   g &lt;- function(x) x + 1 # { is ignored if the body is one-lined   g(x) } f(10) ## [1] 11   6.5 Extraction Function Everything that happens is a function call. So things like these should be no exception. vv &lt;- 1:10 vv[1:3] ## [1] 1 2 3 The &lt;- is the assignment function, i.e., &quot;&lt;-&quot;(&quot;vv&quot;, 1:10) is what really happens in the functional style. And the second line, which is more interesting, is an extraction function of the form [&lt;- taking place. (Type ?&quot;[&lt;-&quot; to see the docuemnt to confirm it realy is it.) So the second line is equivalent to: `[`(vv, 1:3) ## [1] 1 2 3 That is not cool. Nobody writes in that (somewhat ugly?) way. So the R language provides the syntactic sugar to let users write codes in more human-readble fasion.   6.6 Replacement Function Even more interesting is the replacement function: vv &lt;- 1:10 vv[1:3] &lt;- 0 vv ##  [1]  0  0  0  4  5  6  7  8  9 10 The second line really has stories. Now one knows that [ is indeed a function. An extraction function. So how come the second line works? Because one is now assigning a value to the return value of a function. Is that okay? Consider the following example: f &lt;- function(x) x f(1) &lt;- 2 ## Error in f(1) &lt;- 2: target of assignment expands to non-language object No. One CAN’T assign a value to a function call. The reason why vv[1:3] &lt;- 0 will work is because it is completely another function call: the call to the replacement function [&lt;-: vv &lt;- 1:10 `[&lt;-`(vv, 1:3, 0) ##  [1]  0  0  0  4  5  6  7  8  9 10   "],
["char.html", "Chapter 7 R Language Characteristics 7.1 Help 7.2 Vectorization 7.3 Recycling 7.4 The apply Family", " Chapter 7 R Language Characteristics  7.1 Help ?   7.2 Vectorization   7.3 Recycling vec &lt;- 1:10 vec[c(T, F)] ## [1] 1 3 5 7 9 vec_cond &lt;- sample(1:10, 10, replace=TRUE) &gt; 5 ifelse(sample(1:10, 10, replace=TRUE) &gt; 5, 1:10, -(1:10)) ##  [1]  1 -2 -3 -4 -5 -6 -7  8 -9 10   7.4 The apply Family   "],
["work-env.html", "Chapter 8 Working Directory 8.1 Library Search Path 8.2 Save / Load", " Chapter 8 Working Directory Use getwd to query the current working directory. To change working directory, use setwd. For Windows user, the path separator is typically the back-slash \\. But it is the escape character in R so if one would like to use back-slash it must be escaped, for example, like this: setwd(&quot;C:\\\\Users\\\\kylechung&quot;) or equivalently one could still follow *nix convention: setwd(&quot;C:/Users/kylechung&quot;)  8.1 Library Search Path Use .libPaths to show the path(es) that will be searched by R.   8.2 Save / Load save and save.image   "],
["process.html", "Chapter 9 Data Processing 9.1 Tabular Input 9.2 JSON 9.3 Databases 9.4 Others", " Chapter 9 Data Processing  9.1 Tabular Input  9.1.1 Read read.table read.csv readLines   9.1.2 Write write.table writeLines cat    9.2 JSON   9.3 Databases   9.4 Others   "],
["references.html", "Chapter 10 References", " Chapter 10 References     "]
]
